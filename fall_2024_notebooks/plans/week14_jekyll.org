* static site generators with Jekyll
Agenda:
- work on projects, trouble shoot
- presentations next week -- doesn't have to be done, but gotta be close!

Schedule:
- check-ins
- mini-lesson on Github pages
- break
- mini-conference sign ups while working on project
** what is Github Pages?
A hosting service by Github that lets you create static sites on the
web. It takes HTML, CSS, and JavaScript files from a GitHub
repository, and publishes them as a website.

What are static sites? Websites that are generated once (usually by a
program like Python or Ruby), then pushed to the server to be hosted
in its already-generated or "static" state. 

** what is Jekyll?
Jekyll is a static site generator. A program that allows you to
convert plain text documents (like markdown files) into HTML and CSS.
With Jekyll you can author documents in a relatively easy format like
Markdown, and have it transform into HTML.

There are two ways to use Jekyll for Github pages. The easy way and
the hard way. I'm going to review both of them here, and provide
detailed instructions below. 

The easy way: Github pages has built-in support for some kinds of
Jekyll sites, which means that you can create one completely through
Github.com. This is a massive benefit, because virtually all open
source web authoring platforms require you to download and install
software via the command line.

The hard way: For those of you more familiar with the command line,
you'd have a lot more options of different Jekyll themes to choose
from, and a lot more control generally over the way your site is
created. That being said, it is a higher barrier to entry and requires
you to install software like git, ruby, and jekyll over the command
line.

** easy way
*** 1) choose a theme and fork it!
Choose a theme you like from this page: https://pages.github.com/themes/

Fork the theme by going to the github page, and on the top right,
press "fork".

When you are prompted, be sure to change the name of the respository
to something relevant to your project.

*** 2) open the web editor, edit your index.md file
Open the code editor by pressing the period button on your keyboard.
You'll see a new interface appear which lets you edit the files in
your repo.

First, move all of the files (except README) in the root folder to
nest permanently under the "docs" folder. You can leave the README.md
file in the root (later on, you can add your own information here).

The "docs" folder is where Github looks for the HTML files to display
on your site, so by moving the files there, you're making it easier
for Github to generate your site later on.

Second, open the index.md file, which should now be in the "docs"
folder. This file is written in markdown, and offers a handy key for
markdown formatting. The top section (sandwiched by hyphens) is layout
information for the page. Do not change these first three lines).

The rest you can delete to get rid of it, or keep it around for
convenience, as it offers useful information on how to format
markdown. I've simply "commented" it out using markdown comments,
which look like this:

```

<!-- -->

```

You can comment out most of that text by wrapping it with
these symbols. For example, I'm commenting out the first line from the
file below:

```

<!--
Text can be **bold**, _italic_, ~~strikethrough~~ or `keyword`.
-->

```

You can read a whole lot more about markdown formatting here:
https://www.markdownguide.org/cheat-sheet/

Want to create new page? Create a new file for your page called
PAGE-NAME.md, replacing PAGE-NAME with a meaningful filename for the
page.

Add the following frontmatter to the top of the file, replacing
PAGE-TITLE with the page's title and URL-PATH with a path you want for
the page's URL. For example, if the base URL of your site is
https://octocat.github.io and your URL-PATH is /about/contact/, your
page will be located at https://octocat.github.io/about/contact.

#+begin_src
  layout: page
title: "PAGE-TITLE"
permalink: /URL-PATH
#+end_src

Below the frontmatter, add content for your page.

*** 3) commit and push your changes

Once you're done editing the markdown file, go to the little "source"
tab on the left. It looks like three dots connected by lines. Here, on
the lefthand sidebar, you'll see a list of all the changes you've
made, and a blank text box above them. In that blank box, write a
short message summarizing your changes, like "edited the index.md
file". Then, press the "commit & push" button.

*** 4) configure Github pages on your repo settings

Back on your regular repository page (you will need to open up a new
tab and navigate to your repo on github), go to the "Settings" tab at
the top. Then, scroll down to the "Pages" tab on the left sidebar.

Then, on the main section of the page, go to the Branch heading.  From
the first dropdown, select "Master" or "Main," and on the second
dropdown, select "docs". Finally, click save.

Congratulations!

Your website will be visible in a few minutes at the URL:

your_username.github.io/your_repo_name

** hard way

*** 1) installing pre-requisites: ruby & jekyll
Follow instructions here (according to your Operating System) to
install the requirements, which are ruby and jekyll:

https://jekyllrb.com/docs/installation/

*** 2) fork a theme
Choose a jekyll theme that you like from these pages:
https://jekyllrb.com/docs/themes/

Fork the theme by going to the github page, and on the top right,
press "fork".

When you are prompted, be sure to change the name of the respository
to something relevant to your project.

Then, clone the repo to your desktop.

#+begin_src
  cd Desktop
  git clone [insert URL for your theme]
  cd [insert name of theme folder]
#+end_src

Next, run ~bundle install~ to install the necessary jekyll packages
(called "gems") in that folder.

#+begin_src
  bundle install
#+end_src

Finally, generate the website on your local machine:

#+begin_src
  bundle exec jekyll serve
#+end_src

*** 3) editing pages
Open the folder of your repo on you desktop (or wherever you've saved
it on your computer)

First, move all of the files (except README) in the root folder to
nest permanently under the "docs" folder. You can leave the README.md
file in the root (later on, you can add your own information here).

The "docs" folder is where Github looks for the HTML files to display
on your site, so by moving the files there, you're making it easier
for Github to generate your site later on.

Second, open the index.md file, which should now be in the "docs"
folder. This file is written in markdown, and offers a handy key for
markdown formatting. The top section (sandwiched by hyphens) is layout
information for the page. Do not change these first three lines).

The rest you can delete to get rid of it, or keep it around for
convenience, as it offers useful information on how to format
markdown. I've simply "commented" it out using markdown comments,
which look like this:

```

<!-- -->

```

You can comment out most of that text by wrapping it with
these symbols. For example, I'm commenting out the first line from the
file below:

```

<!--
Text can be **bold**, _italic_, ~~strikethrough~~ or `keyword`.
-->

```

You can read a whole lot more about markdown formatting here:
https://www.markdownguide.org/cheat-sheet/ 

Want to create new page? Create a new file for your page called
PAGE-NAME.md, replacing PAGE-NAME with a meaningful filename for the
page.

Add the following frontmatter to the top of the file, replacing
PAGE-TITLE with the page's title and URL-PATH with a path you want for
the page's URL. For example, if the base URL of your site is
https://octocat.github.io and your URL-PATH is /about/contact/, your
page will be located at https://octocat.github.io/about/contact.

#+begin_src
  layout: page
title: "PAGE-TITLE"
permalink: /URL-PATH
#+end_src

Below the frontmatter, add content for your page.

*** 4) pushing to github pages
[[https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/creating-a-github-pages-site-with-jekyll#creating-your-site][See the docs here]]

Navigate to the publishing source for your site. For example, if you
chose to publish your site from the docs folder on the default branch,
create and change directories to the docs folder.

#+begin_src
  mkdir docs
  cd docs
#+end_src

Add the github-pages gem by editing the line starting with # gem
"github-pages". Change this line to:

#+begin_src
  gem "github-pages", "~> GITHUB-PAGES-VERSION", group: :jekyll_plugins 
#+end_src

Replace GITHUB-PAGES-VERSION with the latest supported version of the
github-pages gem, which is "232" as of December 2024. Save and close
the file.

Copy and paste all the files in your project folder into the "docs"
folder.

Then, you'll have to build your gems once again, since you've just
just added a new gem for github pages.

#+begin_src
  bundle install
#+end_src

For help, see "Configuring a publishing source for your GitHub Pages
site":
https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll
